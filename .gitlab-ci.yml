# This file is a template, and might need editing before it works on your project.
image: golang:latest

variables:
  # Please edit to your GitLab project
  REPO_NAME: gitlab.com/msiebuhr/ucs

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME

stages:
    - test
    - build

format:
    stage: test
    script:
      - go fmt $(go list ./... | grep -v /vendor/)
      - go vet $(go list ./... | grep -v /vendor/)

test-race:
    stage: test
    script:
      - go get -u github.com/jstemmer/go-junit-report
      - go test -v -race $(go list ./... | grep -v /vendor/) 2>&1 | go-junit-report > report.xml
    artifacts:
      reports:
        junit: report.xml
        

compile:
    stage: build
    script:
      - go build -race -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/ucs ./cmd/ucs/
      - go build -race -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/ucs-test ./cmd/ucs-test/
      - go build -race -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/ucs-bender ./cmd/ucs-bender/
    artifacts:
      paths:
        - ucs
        - ucs-test

benchmark:
    stage: build
    script:
        - go test -bench=. -run=NONE ./... > $CI_PROJECT_DIR/benchmark.txt
        - go test -bench=. -run=NONE -benchmem ./... > $CI_PROJECT_DIR/benchmark-mem.txt
    artifacts:
      paths:
        - benchmark.txt
        - benchmark-mem.txt
